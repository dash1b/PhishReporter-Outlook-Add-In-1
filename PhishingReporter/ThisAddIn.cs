using Outlook = Microsoft.Office.Interop.Outlook;

namespace PhishingReporter
{
    using System.Runtime.InteropServices;

    using Microsoft.Office.Core;
    using Outlook;

    using Helpers;

    public partial class ThisAddIn
    {
        private Inspectors inspectors;
        private MAPIFolder spamFolder;
        private MAPIFolder deletedFolder;
        private MAPIFolder sentFolder;

        private Language language;

        private void ThisAddIn_Startup(object sender, System.EventArgs e)
        {
            inspectors = Application.Inspectors;
            spamFolder = this.Application.GetNamespace("MAPI").GetDefaultFolder(OlDefaultFolders.olFolderJunk);
            deletedFolder = this.Application.GetNamespace("MAPI").GetDefaultFolder(OlDefaultFolders.olFolderDeletedItems);
            sentFolder = this.Application.GetNamespace("MAPI").GetDefaultFolder(OlDefaultFolders.olFolderSentMail);
            int languageCode = this.Application.LanguageSettings.LanguageID[MsoAppLanguageID.msoLanguageIDUI];
            language = LanguageHelper.ParseLanguage(languageCode);

        }

        public void CreateJunkRule(string senderEmailAddress)
        {
            RuleConditions ruleConditions = null;
            TextRuleCondition subjectTextRuleCondition = null;

            RuleActions ruleActions = null;
            MoveOrCopyRuleAction moveRuleAction = null;

            string ruleName = "PhishingReporter-Autogenerated";

            NameSpace session = Application.Session;
            Store store = session.DefaultStore;
            Rules rules = store.GetRules();
            Rule rule = GetRuleIfExist(ruleName, rules);

            // No rule found
            if (rule == null)
            {
                rule = rules.Create(ruleName, OlRuleType.olRuleReceive);
                ruleConditions = rule.Conditions;
                ruleConditions.SenderAddress.Address = new[] { senderEmailAddress };
                ruleConditions.SenderAddress.Enabled = true;

                rule.Actions.MoveToFolder.Folder = spamFolder;
                rule.Actions.MoveToFolder.Enabled = true;

                rules.Save();
            }
            else // SpamRule already exists
            {
                ruleConditions = rule.Conditions;
                string[] oldAddresses = ruleConditions.SenderAddress.Address;
                string[] newAddresses = new string[oldAddresses.Length + 1];
                oldAddresses.CopyTo(newAddresses, 0);
                newAddresses[oldAddresses.Length] = senderEmailAddress;

                ruleConditions.SenderAddress.Address = newAddresses;
                ruleConditions.SenderAddress.Enabled = true;

                rule.Actions.MoveToFolder.Folder = spamFolder;
                rule.Actions.MoveToFolder.Enabled = true;

                rules.Save();
            }
        }

        private Rule GetRuleIfExist(string ruleName, Rules rules)
        {
            for (int i = 1; i <= rules.Count; i++)
            {
                var rule = rules[i];
                if (rule.Name == ruleName)
                {
                    return rule;
                }

                Marshal.ReleaseComObject(rule);
            }

            return null;
        }

        public Language GetUserLanguage()
        {
            return language;
        }

        private void ThisAddIn_Shutdown(object sender, System.EventArgs e)
        {
        }

        public MAPIFolder GetSpamFolder()
        {
            return spamFolder;
        }

        #region VSTO generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InternalStartup()
        {
            this.Startup += new System.EventHandler(ThisAddIn_Startup);
            this.Shutdown += new System.EventHandler(ThisAddIn_Shutdown);
        }

        #endregion

        public MAPIFolder GetDeletedFolder()
        {
            return deletedFolder;
        }

        public MAPIFolder GetSentFolder()
        {
            return sentFolder;
        }

        public string GetUserIdentification()
        {
            ExchangeUser currentUser = Application.Session.CurrentUser.AddressEntry.GetExchangeUser();

            return $"{currentUser.FirstName}, {currentUser.LastName}, {currentUser.Department}";
        }
    }
}
